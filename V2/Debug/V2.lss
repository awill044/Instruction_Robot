
V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000e24  00000eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080010e  0080010e  00000ec6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b76  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000371  00000000  00000000  00001b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000878  00000000  00000000  00001f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000919  00000000  00000000  00002e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c2       	rjmp	.+1248   	; 0x516 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 33       	cpi	r26, 0x37	; 55
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5f d3       	rcall	.+1726   	; 0x782 <main>
  c4:	ad c6       	rjmp	.+3418   	; 0xe20 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <MoveTime>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
	tasksPeriodCntDown = tasksPeriodGCD;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	09 f4       	brne	.+2      	; 0xd0 <MoveTime+0x8>
  ce:	3f c0       	rjmp	.+126    	; 0x14e <MoveTime+0x86>
  d0:	1c f4       	brge	.+6      	; 0xd8 <MoveTime+0x10>
  d2:	89 2b       	or	r24, r25
  d4:	51 f0       	breq	.+20     	; 0xea <MoveTime+0x22>
  d6:	68 c0       	rjmp	.+208    	; 0x1a8 <MoveTime+0xe0>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	91 05       	cpc	r25, r1
  dc:	09 f4       	brne	.+2      	; 0xe0 <MoveTime+0x18>
  de:	46 c0       	rjmp	.+140    	; 0x16c <MoveTime+0xa4>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	09 f4       	brne	.+2      	; 0xe8 <MoveTime+0x20>
  e6:	51 c0       	rjmp	.+162    	; 0x18a <MoveTime+0xc2>
  e8:	5f c0       	rjmp	.+190    	; 0x1a8 <MoveTime+0xe0>
  ea:	80 91 05 01 	lds	r24, 0x0105
  ee:	81 11       	cpse	r24, r1
  f0:	0d c0       	rjmp	.+26     	; 0x10c <MoveTime+0x44>
  f2:	80 91 1e 01 	lds	r24, 0x011E
  f6:	88 23       	and	r24, r24
  f8:	39 f1       	breq	.+78     	; 0x148 <MoveTime+0x80>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 1f 01 	sts	0x011F, r24
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	80 93 00 01 	sts	0x0100, r24
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	69 f4       	brne	.+26     	; 0x12a <MoveTime+0x62>
 110:	80 91 1e 01 	lds	r24, 0x011E
 114:	88 23       	and	r24, r24
 116:	c1 f0       	breq	.+48     	; 0x148 <MoveTime+0x80>
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 1f 01 	sts	0x011F, r24
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	80 93 00 01 	sts	0x0100, r24
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	69 f4       	brne	.+26     	; 0x148 <MoveTime+0x80>
 12e:	80 91 1e 01 	lds	r24, 0x011E
 132:	88 23       	and	r24, r24
 134:	49 f0       	breq	.+18     	; 0x148 <MoveTime+0x80>
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	80 93 1f 01 	sts	0x011F, r24
 13c:	8c e3       	ldi	r24, 0x3C	; 60
 13e:	80 93 00 01 	sts	0x0100, r24
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret
 148:	10 92 1f 01 	sts	0x011F, r1
 14c:	2f c0       	rjmp	.+94     	; 0x1ac <MoveTime+0xe4>
 14e:	20 91 1c 01 	lds	r18, 0x011C
 152:	30 91 00 01 	lds	r19, 0x0100
 156:	23 17       	cp	r18, r19
 158:	20 f4       	brcc	.+8      	; 0x162 <MoveTime+0x9a>
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	20 93 1c 01 	sts	0x011C, r18
 160:	08 95       	ret
 162:	10 92 1f 01 	sts	0x011F, r1
 166:	10 92 1e 01 	sts	0x011E, r1
 16a:	20 c0       	rjmp	.+64     	; 0x1ac <MoveTime+0xe4>
 16c:	20 91 1c 01 	lds	r18, 0x011C
 170:	30 91 00 01 	lds	r19, 0x0100
 174:	23 17       	cp	r18, r19
 176:	20 f4       	brcc	.+8      	; 0x180 <MoveTime+0xb8>
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	20 93 1c 01 	sts	0x011C, r18
 17e:	08 95       	ret
 180:	10 92 1f 01 	sts	0x011F, r1
 184:	10 92 1e 01 	sts	0x011E, r1
 188:	11 c0       	rjmp	.+34     	; 0x1ac <MoveTime+0xe4>
 18a:	20 91 1c 01 	lds	r18, 0x011C
 18e:	30 91 00 01 	lds	r19, 0x0100
 192:	23 17       	cp	r18, r19
 194:	20 f4       	brcc	.+8      	; 0x19e <MoveTime+0xd6>
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	20 93 1c 01 	sts	0x011C, r18
 19c:	08 95       	ret
 19e:	10 92 1f 01 	sts	0x011F, r1
 1a2:	10 92 1e 01 	sts	0x011E, r1
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <MoveTime+0xe4>
 1a8:	10 92 1f 01 	sts	0x011F, r1
 1ac:	10 92 1c 01 	sts	0x011C, r1
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <Movement>:
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	91 05       	cpc	r25, r1
 1ba:	d1 f0       	breq	.+52     	; 0x1f0 <Movement+0x3a>
 1bc:	1c f4       	brge	.+6      	; 0x1c4 <Movement+0xe>
 1be:	89 2b       	or	r24, r25
 1c0:	39 f0       	breq	.+14     	; 0x1d0 <Movement+0x1a>
 1c2:	45 c0       	rjmp	.+138    	; 0x24e <Movement+0x98>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	91 05       	cpc	r25, r1
 1c8:	19 f1       	breq	.+70     	; 0x210 <Movement+0x5a>
 1ca:	03 97       	sbiw	r24, 0x03	; 3
 1cc:	89 f1       	breq	.+98     	; 0x230 <Movement+0x7a>
 1ce:	3f c0       	rjmp	.+126    	; 0x24e <Movement+0x98>
 1d0:	80 91 1f 01 	lds	r24, 0x011F
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	09 f4       	brne	.+2      	; 0x1da <Movement+0x24>
 1d8:	6c c0       	rjmp	.+216    	; 0x2b2 <Movement+0xfc>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <Movement+0x2a>
 1de:	78 c0       	rjmp	.+240    	; 0x2d0 <Movement+0x11a>
 1e0:	31 e0       	ldi	r19, 0x01	; 1
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	09 f0       	breq	.+2      	; 0x1ea <Movement+0x34>
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	83 2f       	mov	r24, r19
 1ec:	92 2f       	mov	r25, r18
 1ee:	31 c0       	rjmp	.+98     	; 0x252 <Movement+0x9c>
 1f0:	80 91 1f 01 	lds	r24, 0x011F
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	09 f4       	brne	.+2      	; 0x1fa <Movement+0x44>
 1f8:	5c c0       	rjmp	.+184    	; 0x2b2 <Movement+0xfc>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	09 f4       	brne	.+2      	; 0x200 <Movement+0x4a>
 1fe:	68 c0       	rjmp	.+208    	; 0x2d0 <Movement+0x11a>
 200:	31 e0       	ldi	r19, 0x01	; 1
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	09 f0       	breq	.+2      	; 0x20a <Movement+0x54>
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	83 2f       	mov	r24, r19
 20c:	92 2f       	mov	r25, r18
 20e:	21 c0       	rjmp	.+66     	; 0x252 <Movement+0x9c>
 210:	80 91 1f 01 	lds	r24, 0x011F
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	09 f4       	brne	.+2      	; 0x21a <Movement+0x64>
 218:	4c c0       	rjmp	.+152    	; 0x2b2 <Movement+0xfc>
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	09 f4       	brne	.+2      	; 0x220 <Movement+0x6a>
 21e:	58 c0       	rjmp	.+176    	; 0x2d0 <Movement+0x11a>
 220:	31 e0       	ldi	r19, 0x01	; 1
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	09 f0       	breq	.+2      	; 0x22a <Movement+0x74>
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	83 2f       	mov	r24, r19
 22c:	92 2f       	mov	r25, r18
 22e:	11 c0       	rjmp	.+34     	; 0x252 <Movement+0x9c>
 230:	80 91 1f 01 	lds	r24, 0x011F
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	e9 f1       	breq	.+122    	; 0x2b2 <Movement+0xfc>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	09 f4       	brne	.+2      	; 0x23e <Movement+0x88>
 23c:	49 c0       	rjmp	.+146    	; 0x2d0 <Movement+0x11a>
 23e:	31 e0       	ldi	r19, 0x01	; 1
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	09 f0       	breq	.+2      	; 0x248 <Movement+0x92>
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	83 2f       	mov	r24, r19
 24a:	92 2f       	mov	r25, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <Movement+0x9c>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	91 05       	cpc	r25, r1
 256:	c9 f0       	breq	.+50     	; 0x28a <Movement+0xd4>
 258:	1c f4       	brge	.+6      	; 0x260 <Movement+0xaa>
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	49 f0       	breq	.+18     	; 0x270 <Movement+0xba>
 25e:	08 95       	ret
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	91 05       	cpc	r25, r1
 264:	31 f1       	breq	.+76     	; 0x2b2 <Movement+0xfc>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	91 05       	cpc	r25, r1
 26a:	09 f0       	breq	.+2      	; 0x26e <Movement+0xb8>
 26c:	3f c0       	rjmp	.+126    	; 0x2ec <Movement+0x136>
 26e:	30 c0       	rjmp	.+96     	; 0x2d0 <Movement+0x11a>
 270:	28 b1       	in	r18, 0x08	; 8
 272:	23 60       	ori	r18, 0x03	; 3
 274:	28 b9       	out	0x08, r18	; 8
 276:	e6 e7       	ldi	r30, 0x76	; 118
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <Movement+0xc4>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <Movement+0xca>
 280:	00 00       	nop
 282:	28 b1       	in	r18, 0x08	; 8
 284:	2c 7f       	andi	r18, 0xFC	; 252
 286:	28 b9       	out	0x08, r18	; 8
 288:	08 95       	ret
 28a:	28 b1       	in	r18, 0x08	; 8
 28c:	23 60       	ori	r18, 0x03	; 3
 28e:	28 b9       	out	0x08, r18	; 8
 290:	e9 ef       	ldi	r30, 0xF9	; 249
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <Movement+0xde>
 298:	00 c0       	rjmp	.+0      	; 0x29a <Movement+0xe4>
 29a:	00 00       	nop
 29c:	40 98       	cbi	0x08, 0	; 8
 29e:	e2 e1       	ldi	r30, 0x12	; 18
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <Movement+0xec>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <Movement+0xf2>
 2a8:	00 00       	nop
 2aa:	28 b1       	in	r18, 0x08	; 8
 2ac:	2c 7f       	andi	r18, 0xFC	; 252
 2ae:	28 b9       	out	0x08, r18	; 8
 2b0:	08 95       	ret
 2b2:	88 b1       	in	r24, 0x08	; 8
 2b4:	83 60       	ori	r24, 0x03	; 3
 2b6:	88 b9       	out	0x08, r24	; 8
 2b8:	89 ef       	ldi	r24, 0xF9	; 249
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <Movement+0x106>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <Movement+0x10c>
 2c2:	00 00       	nop
 2c4:	88 b1       	in	r24, 0x08	; 8
 2c6:	8c 7f       	andi	r24, 0xFC	; 252
 2c8:	88 b9       	out	0x08, r24	; 8
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	83 60       	ori	r24, 0x03	; 3
 2d4:	88 b9       	out	0x08, r24	; 8
 2d6:	e3 ef       	ldi	r30, 0xF3	; 243
 2d8:	f1 e0       	ldi	r31, 0x01	; 1
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <Movement+0x124>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <Movement+0x12a>
 2e0:	00 00       	nop
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	8c 7f       	andi	r24, 0xFC	; 252
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret

000002ee <delay_ms>:
 2ee:	18 16       	cp	r1, r24
 2f0:	19 06       	cpc	r1, r25
 2f2:	5c f0       	brlt	.+22     	; 0x30a <delay_ms+0x1c>
 2f4:	08 95       	ret
 2f6:	00 00       	nop
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	31 09       	sbc	r19, r1
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <delay_ms+0x8>
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	48 17       	cp	r20, r24
 304:	59 07       	cpc	r21, r25
 306:	29 f4       	brne	.+10     	; 0x312 <delay_ms+0x24>
 308:	08 95       	ret
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	77 e0       	ldi	r23, 0x07	; 7
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	27 2f       	mov	r18, r23
 314:	36 2f       	mov	r19, r22
 316:	ef cf       	rjmp	.-34     	; 0x2f6 <delay_ms+0x8>

00000318 <LCD_WriteCommand>:
 318:	28 98       	cbi	0x05, 0	; 5
 31a:	82 b9       	out	0x02, r24	; 2
 31c:	29 9a       	sbi	0x05, 1	; 5
 31e:	00 00       	nop
 320:	29 98       	cbi	0x05, 1	; 5
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	e3 cf       	rjmp	.-58     	; 0x2ee <delay_ms>
 328:	08 95       	ret

0000032a <LCD_ClearScreen>:
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	f5 cf       	rjmp	.-22     	; 0x318 <LCD_WriteCommand>
 32e:	08 95       	ret

00000330 <LCD_init>:
 330:	84 e6       	ldi	r24, 0x64	; 100
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	dc df       	rcall	.-72     	; 0x2ee <delay_ms>
 336:	88 e3       	ldi	r24, 0x38	; 56
 338:	ef df       	rcall	.-34     	; 0x318 <LCD_WriteCommand>
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	ed df       	rcall	.-38     	; 0x318 <LCD_WriteCommand>
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	eb df       	rcall	.-42     	; 0x318 <LCD_WriteCommand>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	e9 df       	rcall	.-46     	; 0x318 <LCD_WriteCommand>
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	d1 cf       	rjmp	.-94     	; 0x2ee <delay_ms>
 34c:	08 95       	ret

0000034e <LCD_WriteData>:
 34e:	28 9a       	sbi	0x05, 0	; 5
 350:	82 b9       	out	0x02, r24	; 2
 352:	29 9a       	sbi	0x05, 1	; 5
 354:	00 00       	nop
 356:	29 98       	cbi	0x05, 1	; 5
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	c8 cf       	rjmp	.-112    	; 0x2ee <delay_ms>
 35e:	08 95       	ret

00000360 <LCD_Cursor>:
 360:	81 31       	cpi	r24, 0x11	; 17
 362:	18 f4       	brcc	.+6      	; 0x36a <LCD_Cursor+0xa>
 364:	81 58       	subi	r24, 0x81	; 129
 366:	d8 cf       	rjmp	.-80     	; 0x318 <LCD_WriteCommand>
 368:	08 95       	ret
 36a:	81 55       	subi	r24, 0x51	; 81
 36c:	d5 cf       	rjmp	.-86     	; 0x318 <LCD_WriteCommand>
 36e:	08 95       	ret

00000370 <LCD_DisplayString>:
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	18 2f       	mov	r17, r24
 37a:	eb 01       	movw	r28, r22
 37c:	d6 df       	rcall	.-84     	; 0x32a <LCD_ClearScreen>
 37e:	88 81       	ld	r24, Y
 380:	88 23       	and	r24, r24
 382:	51 f0       	breq	.+20     	; 0x398 <LCD_DisplayString+0x28>
 384:	01 e0       	ldi	r16, 0x01	; 1
 386:	01 0f       	add	r16, r17
 388:	81 2f       	mov	r24, r17
 38a:	ea df       	rcall	.-44     	; 0x360 <LCD_Cursor>
 38c:	89 91       	ld	r24, Y+
 38e:	df df       	rcall	.-66     	; 0x34e <LCD_WriteData>
 390:	10 2f       	mov	r17, r16
 392:	88 81       	ld	r24, Y
 394:	81 11       	cpse	r24, r1
 396:	f6 cf       	rjmp	.-20     	; 0x384 <LCD_DisplayString+0x14>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <Range_Finder>:
 3a2:	89 2b       	or	r24, r25
 3a4:	21 f4       	brne	.+8      	; 0x3ae <Range_Finder+0xc>
 3a6:	10 92 19 01 	sts	0x0119, r1
 3aa:	10 92 18 01 	sts	0x0118, r1
 3ae:	59 98       	cbi	0x0b, 1	; 11
 3b0:	83 ef       	ldi	r24, 0xF3	; 243
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <Range_Finder+0x12>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <Range_Finder+0x18>
 3ba:	00 00       	nop
 3bc:	59 9a       	sbi	0x0b, 1	; 11
 3be:	83 ec       	ldi	r24, 0xC3	; 195
 3c0:	99 e0       	ldi	r25, 0x09	; 9
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <Range_Finder+0x20>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <Range_Finder+0x26>
 3c8:	00 00       	nop
 3ca:	59 98       	cbi	0x0b, 1	; 11
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	9e e3       	ldi	r25, 0x3E	; 62
 3d0:	48 9b       	sbis	0x09, 0	; 9
 3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <Range_Finder+0x46>
 3d4:	20 91 18 01 	lds	r18, 0x0118
 3d8:	30 91 19 01 	lds	r19, 0x0119
 3dc:	2f 5f       	subi	r18, 0xFF	; 255
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	30 93 19 01 	sts	0x0119, r19
 3e4:	20 93 18 01 	sts	0x0118, r18
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	91 f7       	brne	.-28     	; 0x3d0 <Range_Finder+0x2e>
 3ec:	20 91 18 01 	lds	r18, 0x0118
 3f0:	30 91 19 01 	lds	r19, 0x0119
 3f4:	af e0       	ldi	r26, 0x0F	; 15
 3f6:	ba ee       	ldi	r27, 0xEA	; 234
 3f8:	3b d2       	rcall	.+1142   	; 0x870 <__umulhisi3>
 3fa:	00 24       	eor	r0, r0
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	00 1c       	adc	r0, r0
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	00 1c       	adc	r0, r0
 408:	89 2f       	mov	r24, r25
 40a:	90 2d       	mov	r25, r0
 40c:	90 93 19 01 	sts	0x0119, r25
 410:	80 93 18 01 	sts	0x0118, r24
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	9f 93       	push	r25
 41e:	8f 93       	push	r24
 420:	8e e0       	ldi	r24, 0x0E	; 14
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	9f 93       	push	r25
 426:	8f 93       	push	r24
 428:	32 d2       	rcall	.+1124   	; 0x88e <sprintf>
 42a:	6e e0       	ldi	r22, 0x0E	; 14
 42c:	71 e0       	ldi	r23, 0x01	; 1
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	9f df       	rcall	.-194    	; 0x370 <LCD_DisplayString>
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	08 95       	ret

00000444 <TimerISR>:
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	10 92 1d 01 	sts	0x011D, r1
 456:	80 91 20 01 	lds	r24, 0x0120
 45a:	88 23       	and	r24, r24
 45c:	09 f4       	brne	.+2      	; 0x460 <TimerISR+0x1c>
 45e:	53 c0       	rjmp	.+166    	; 0x506 <TimerISR+0xc2>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	1b e0       	ldi	r17, 0x0B	; 11
 464:	c0 91 25 01 	lds	r28, 0x0125
 468:	d0 91 26 01 	lds	r29, 0x0126
 46c:	18 9f       	mul	r17, r24
 46e:	c0 0d       	add	r28, r0
 470:	d1 1d       	adc	r29, r1
 472:	11 24       	eor	r1, r1
 474:	4d 81       	ldd	r20, Y+5	; 0x05
 476:	5e 81       	ldd	r21, Y+6	; 0x06
 478:	6f 81       	ldd	r22, Y+7	; 0x07
 47a:	78 85       	ldd	r23, Y+8	; 0x08
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	9a 81       	ldd	r25, Y+2	; 0x02
 480:	ab 81       	ldd	r26, Y+3	; 0x03
 482:	bc 81       	ldd	r27, Y+4	; 0x04
 484:	48 17       	cp	r20, r24
 486:	59 07       	cpc	r21, r25
 488:	6a 07       	cpc	r22, r26
 48a:	7b 07       	cpc	r23, r27
 48c:	b0 f0       	brcs	.+44     	; 0x4ba <TimerISR+0x76>
 48e:	88 81       	ld	r24, Y
 490:	e9 85       	ldd	r30, Y+9	; 0x09
 492:	fa 85       	ldd	r31, Y+10	; 0x0a
 494:	08 2e       	mov	r0, r24
 496:	00 0c       	add	r0, r0
 498:	99 0b       	sbc	r25, r25
 49a:	09 95       	icall
 49c:	88 83       	st	Y, r24
 49e:	80 91 1d 01 	lds	r24, 0x011D
 4a2:	e0 91 25 01 	lds	r30, 0x0125
 4a6:	f0 91 26 01 	lds	r31, 0x0126
 4aa:	18 9f       	mul	r17, r24
 4ac:	e0 0d       	add	r30, r0
 4ae:	f1 1d       	adc	r31, r1
 4b0:	11 24       	eor	r1, r1
 4b2:	15 82       	std	Z+5, r1	; 0x05
 4b4:	16 82       	std	Z+6, r1	; 0x06
 4b6:	17 82       	std	Z+7, r1	; 0x07
 4b8:	10 86       	std	Z+8, r1	; 0x08
 4ba:	80 91 1d 01 	lds	r24, 0x011D
 4be:	e0 91 25 01 	lds	r30, 0x0125
 4c2:	f0 91 26 01 	lds	r31, 0x0126
 4c6:	18 9f       	mul	r17, r24
 4c8:	e0 0d       	add	r30, r0
 4ca:	f1 1d       	adc	r31, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	c5 80       	ldd	r12, Z+5	; 0x05
 4d0:	d6 80       	ldd	r13, Z+6	; 0x06
 4d2:	e7 80       	ldd	r14, Z+7	; 0x07
 4d4:	f0 84       	ldd	r15, Z+8	; 0x08
 4d6:	40 91 06 01 	lds	r20, 0x0106
 4da:	50 91 07 01 	lds	r21, 0x0107
 4de:	60 91 08 01 	lds	r22, 0x0108
 4e2:	70 91 09 01 	lds	r23, 0x0109
 4e6:	4c 0d       	add	r20, r12
 4e8:	5d 1d       	adc	r21, r13
 4ea:	6e 1d       	adc	r22, r14
 4ec:	7f 1d       	adc	r23, r15
 4ee:	45 83       	std	Z+5, r20	; 0x05
 4f0:	56 83       	std	Z+6, r21	; 0x06
 4f2:	67 83       	std	Z+7, r22	; 0x07
 4f4:	70 87       	std	Z+8, r23	; 0x08
 4f6:	8f 5f       	subi	r24, 0xFF	; 255
 4f8:	80 93 1d 01 	sts	0x011D, r24
 4fc:	90 91 20 01 	lds	r25, 0x0120
 500:	89 17       	cp	r24, r25
 502:	08 f4       	brcc	.+2      	; 0x506 <TimerISR+0xc2>
 504:	af cf       	rjmp	.-162    	; 0x464 <TimerISR+0x20>
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	df 90       	pop	r13
 512:	cf 90       	pop	r12
 514:	08 95       	ret

00000516 <__vector_13>:
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	0b b6       	in	r0, 0x3b	; 59
 522:	0f 92       	push	r0
 524:	2f 93       	push	r18
 526:	3f 93       	push	r19
 528:	4f 93       	push	r20
 52a:	5f 93       	push	r21
 52c:	6f 93       	push	r22
 52e:	7f 93       	push	r23
 530:	8f 93       	push	r24
 532:	9f 93       	push	r25
 534:	af 93       	push	r26
 536:	bf 93       	push	r27
 538:	ef 93       	push	r30
 53a:	ff 93       	push	r31
 53c:	80 91 21 01 	lds	r24, 0x0121
 540:	90 91 22 01 	lds	r25, 0x0122
 544:	a0 91 23 01 	lds	r26, 0x0123
 548:	b0 91 24 01 	lds	r27, 0x0124
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	a1 09       	sbc	r26, r1
 550:	b1 09       	sbc	r27, r1
 552:	80 93 21 01 	sts	0x0121, r24
 556:	90 93 22 01 	sts	0x0122, r25
 55a:	a0 93 23 01 	sts	0x0123, r26
 55e:	b0 93 24 01 	sts	0x0124, r27
 562:	89 2b       	or	r24, r25
 564:	8a 2b       	or	r24, r26
 566:	8b 2b       	or	r24, r27
 568:	89 f4       	brne	.+34     	; 0x58c <__vector_13+0x76>
 56a:	6c df       	rcall	.-296    	; 0x444 <TimerISR>
 56c:	80 91 06 01 	lds	r24, 0x0106
 570:	90 91 07 01 	lds	r25, 0x0107
 574:	a0 91 08 01 	lds	r26, 0x0108
 578:	b0 91 09 01 	lds	r27, 0x0109
 57c:	80 93 21 01 	sts	0x0121, r24
 580:	90 93 22 01 	sts	0x0122, r25
 584:	a0 93 23 01 	sts	0x0123, r26
 588:	b0 93 24 01 	sts	0x0124, r27
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0b be       	out	0x3b, r0	; 59
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 5b2:	8b e0       	ldi	r24, 0x0B	; 11
 5b4:	80 93 81 00 	sts	0x0081, r24
					// Thus TCCR1B = 00001011 or 0x0B
					// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 5b8:	8d e7       	ldi	r24, 0x7D	; 125
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	90 93 89 00 	sts	0x0089, r25
 5c0:	80 93 88 00 	sts	0x0088, r24
					// So when TCNT1 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

#if defined (__AVR_ATmega1284__)
    TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	80 93 6f 00 	sts	0x006F, r24
#else
    TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
#endif

	// Initialize avr counter
	TCNT1 = 0;
 5ca:	10 92 85 00 	sts	0x0085, r1
 5ce:	10 92 84 00 	sts	0x0084, r1

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 5d2:	80 91 06 01 	lds	r24, 0x0106
 5d6:	90 91 07 01 	lds	r25, 0x0107
 5da:	a0 91 08 01 	lds	r26, 0x0108
 5de:	b0 91 09 01 	lds	r27, 0x0109
 5e2:	80 93 21 01 	sts	0x0121, r24
 5e6:	90 93 22 01 	sts	0x0122, r25
 5ea:	a0 93 23 01 	sts	0x0123, r26
 5ee:	b0 93 24 01 	sts	0x0124, r27

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 5f2:	8f b7       	in	r24, 0x3f	; 63
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	8f bf       	out	0x3f, r24	; 63
 5f8:	08 95       	ret

000005fa <instruct_sequence>:
#include <stdlib.h>

// Fills the instruction sequence array will proper values
void instruct_sequence(signed char *list, unsigned char dir, unsigned char instruct){
	unsigned char i=0;
	if(instruct >= 4)
 5fa:	44 30       	cpi	r20, 0x04	; 4
 5fc:	90 f5       	brcc	.+100    	; 0x662 <instruct_sequence+0x68>
		return; // case in which robot has reached goal
	// If the robot is not facing the right direction.
	if(dir != instruct){
 5fe:	64 17       	cp	r22, r20
 600:	59 f1       	breq	.+86     	; 0x658 <instruct_sequence+0x5e>
		// if facing opposite direction (must turn twice)
		if(abs(dir-instruct) == 2){
 602:	26 2f       	mov	r18, r22
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	24 1b       	sub	r18, r20
 608:	31 09       	sbc	r19, r1
 60a:	f9 01       	movw	r30, r18
 60c:	ff 23       	and	r31, r31
 60e:	24 f4       	brge	.+8      	; 0x618 <instruct_sequence+0x1e>
 610:	ee 27       	eor	r30, r30
 612:	ff 27       	eor	r31, r31
 614:	e2 1b       	sub	r30, r18
 616:	f3 0b       	sbc	r31, r19
 618:	32 97       	sbiw	r30, 0x02	; 2
 61a:	31 f4       	brne	.+12     	; 0x628 <instruct_sequence+0x2e>
			list[i] = 1; // turn right 90 degrees
 61c:	21 e0       	ldi	r18, 0x01	; 1
 61e:	fc 01       	movw	r30, r24
 620:	20 83       	st	Z, r18
			i++;
			list[i] = 1;
 622:	21 83       	std	Z+1, r18	; 0x01
			i++;
 624:	22 e0       	ldi	r18, 0x02	; 2
 626:	19 c0       	rjmp	.+50     	; 0x65a <instruct_sequence+0x60>
		}
		else if(((signed char)dir-(signed char)instruct == 1) || ((dir==0)&&(instruct==3))){
 628:	26 2f       	mov	r18, r22
 62a:	06 2e       	mov	r0, r22
 62c:	00 0c       	add	r0, r0
 62e:	33 0b       	sbc	r19, r19
 630:	24 1b       	sub	r18, r20
 632:	31 09       	sbc	r19, r1
 634:	47 fd       	sbrc	r20, 7
 636:	33 95       	inc	r19
 638:	21 30       	cpi	r18, 0x01	; 1
 63a:	31 05       	cpc	r19, r1
 63c:	21 f0       	breq	.+8      	; 0x646 <instruct_sequence+0x4c>
 63e:	61 11       	cpse	r22, r1
 640:	07 c0       	rjmp	.+14     	; 0x650 <instruct_sequence+0x56>
 642:	43 30       	cpi	r20, 0x03	; 3
 644:	29 f4       	brne	.+10     	; 0x650 <instruct_sequence+0x56>
			list[i] = 3; // turn left 90 degrees
 646:	23 e0       	ldi	r18, 0x03	; 3
 648:	fc 01       	movw	r30, r24
 64a:	20 83       	st	Z, r18
			i++;
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	05 c0       	rjmp	.+10     	; 0x65a <instruct_sequence+0x60>
		}
		else{
			list[i] = 1;
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
 656:	01 c0       	rjmp	.+2      	; 0x65a <instruct_sequence+0x60>
#include <stdlib.h>

// Fills the instruction sequence array will proper values
void instruct_sequence(signed char *list, unsigned char dir, unsigned char instruct){
	unsigned char i=0;
 658:	20 e0       	ldi	r18, 0x00	; 0
		else{
			list[i] = 1;
			i++;
		}
	}
	list[i] = 0;
 65a:	fc 01       	movw	r30, r24
 65c:	e2 0f       	add	r30, r18
 65e:	f1 1d       	adc	r31, r1
 660:	10 82       	st	Z, r1
 662:	08 95       	ret

00000664 <Exec_Sequence>:
// there are no more elements in the "orders" array.
enum Exec_Sequence_States {ES_Init, ES_Wait, ES_Command, ES_NextCell, ES_Done};
int Exec_Sequence(int state){
	static unsigned char i=0;
	static unsigned char n=0;
	switch(state){
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	91 05       	cpc	r25, r1
 668:	a9 f0       	breq	.+42     	; 0x694 <Exec_Sequence+0x30>
 66a:	3c f4       	brge	.+14     	; 0x67a <Exec_Sequence+0x16>
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	09 f4       	brne	.+2      	; 0x672 <Exec_Sequence+0xe>
 670:	3f c0       	rjmp	.+126    	; 0x6f0 <Exec_Sequence+0x8c>
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	91 05       	cpc	r25, r1
 676:	49 f0       	breq	.+18     	; 0x68a <Exec_Sequence+0x26>
 678:	68 c0       	rjmp	.+208    	; 0x74a <Exec_Sequence+0xe6>
 67a:	83 30       	cpi	r24, 0x03	; 3
 67c:	91 05       	cpc	r25, r1
 67e:	b9 f0       	breq	.+46     	; 0x6ae <Exec_Sequence+0x4a>
 680:	84 30       	cpi	r24, 0x04	; 4
 682:	91 05       	cpc	r25, r1
 684:	09 f4       	brne	.+2      	; 0x688 <Exec_Sequence+0x24>
 686:	66 c0       	rjmp	.+204    	; 0x754 <Exec_Sequence+0xf0>
 688:	60 c0       	rjmp	.+192    	; 0x74a <Exec_Sequence+0xe6>
		case ES_Init:
			state = ES_NextCell;
			i=0;
			break;
		case ES_Wait:
			if(isReady == true){
 68a:	20 91 1e 01 	lds	r18, 0x011E
 68e:	22 23       	and	r18, r18
 690:	c9 f0       	breq	.+50     	; 0x6c4 <Exec_Sequence+0x60>
 692:	08 95       	ret
			else{
				state = ES_Command;
			}
			break;
		case ES_Command:
			if((i>=4) || (instructions[i]<0)){
 694:	e0 91 1b 01 	lds	r30, 0x011B
 698:	e4 30       	cpi	r30, 0x04	; 4
 69a:	50 f5       	brcc	.+84     	; 0x6f0 <Exec_Sequence+0x8c>
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	ef 5f       	subi	r30, 0xFF	; 255
 6a0:	fe 4f       	sbci	r31, 0xFE	; 254
 6a2:	80 81       	ld	r24, Z
 6a4:	88 23       	and	r24, r24
 6a6:	24 f1       	brlt	.+72     	; 0x6f0 <Exec_Sequence+0x8c>
				state = ES_NextCell;
			}
			else{
				state = ES_Wait;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	08 95       	ret
			}
			break;
		case ES_NextCell:
			if(n >= orderAmt){
 6ae:	80 91 1a 01 	lds	r24, 0x011A
 6b2:	88 30       	cpi	r24, 0x08	; 8
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <Exec_Sequence+0x54>
 6b6:	4c c0       	rjmp	.+152    	; 0x750 <Exec_Sequence+0xec>
				state = ES_Done;
			}
			else{
				state = ES_Wait;
				n++;
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 1a 01 	sts	0x011A, r24
		case ES_NextCell:
			if(n >= orderAmt){
				state = ES_Done;
			}
			else{
				state = ES_Wait;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	08 95       	ret
		case ES_Init:
			break;
		case ES_Wait:
			break;
		case ES_Command:
			i++;
 6c4:	80 91 1b 01 	lds	r24, 0x011B
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	80 93 1b 01 	sts	0x011B, r24
			if((instructions[i]>=0) && (i<4)){
 6ce:	e8 2f       	mov	r30, r24
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	ef 5f       	subi	r30, 0xFF	; 255
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	90 81       	ld	r25, Z
 6d8:	99 23       	and	r25, r25
 6da:	74 f1       	brlt	.+92     	; 0x738 <Exec_Sequence+0xd4>
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	78 f5       	brcc	.+94     	; 0x73e <Exec_Sequence+0xda>
				finalInstruct = instructions[i];
 6e0:	90 93 05 01 	sts	0x0105, r25
				isReady = true;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	80 93 1e 01 	sts	0x011E, r24
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	08 95       	ret
			}
			break;
		case ES_NextCell:
			for(i=0; i<4; i++){
				instructions[i] = -1;
 6f0:	e1 e0       	ldi	r30, 0x01	; 1
 6f2:	f1 e0       	ldi	r31, 0x01	; 1
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	80 83       	st	Z, r24
 6f8:	81 83       	std	Z+1, r24	; 0x01
 6fa:	82 83       	std	Z+2, r24	; 0x02
 6fc:	83 83       	std	Z+3, r24	; 0x03
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	80 93 1b 01 	sts	0x011B, r24
			}
			if(n < orderAmt){
 704:	e0 91 1a 01 	lds	r30, 0x011A
 708:	e8 30       	cpi	r30, 0x08	; 8
 70a:	e0 f4       	brcc	.+56     	; 0x744 <Exec_Sequence+0xe0>
				instruct_sequence(instructions, orders[n].direction, orders[n].cell);
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	e9 5d       	subi	r30, 0xD9	; 217
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	41 81       	ldd	r20, Z+1	; 0x01
 718:	60 81       	ld	r22, Z
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	6d df       	rcall	.-294    	; 0x5fa <instruct_sequence>
				i=0;
 720:	10 92 1b 01 	sts	0x011B, r1
				finalInstruct = instructions[i];
 724:	80 91 01 01 	lds	r24, 0x0101
 728:	80 93 05 01 	sts	0x0105, r24
				isReady = true;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	80 93 1e 01 	sts	0x011E, r24
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	08 95       	ret
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	08 95       	ret
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	08 95       	ret
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	08 95       	ret
			break;
		case ES_Done:
			state = ES_Done;
			break;
		default:
			state = ES_Init;
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	08 95       	ret
				state = ES_Wait;
			}
			break;
		case ES_NextCell:
			if(n >= orderAmt){
				state = ES_Done;
 750:	84 e0       	ldi	r24, 0x04	; 4
 752:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	}
	return state;
}
 754:	08 95       	ret

00000756 <init_orders>:
};
struct Order orders[orderAmt];
void init_orders(){
	unsigned char j=0;
	// 1st order
	orders[j].direction = dir_NORTH; // initial direction in relation to the world
 756:	e7 e2       	ldi	r30, 0x27	; 39
 758:	f1 e0       	ldi	r31, 0x01	; 1
 75a:	10 82       	st	Z, r1
	orders[j].cell = cT_NORTH;
 75c:	11 82       	std	Z+1, r1	; 0x01
	j++;
	// 2nd order
	orders[j].direction = (cellType) orders[j-1].cell;
 75e:	12 82       	std	Z+2, r1	; 0x02
	orders[j].cell = cT_EAST;
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	93 83       	std	Z+3, r25	; 0x03
	j++;
	// 3rd order
	orders[j].direction = (cellType) orders[j-1].cell;
 764:	94 83       	std	Z+4, r25	; 0x04
	orders[j].cell = cT_SOUTH;
 766:	82 e0       	ldi	r24, 0x02	; 2
 768:	85 83       	std	Z+5, r24	; 0x05
	j++;
	// 4th order
	orders[j].direction = (cellType) orders[j-1].cell;
 76a:	86 83       	std	Z+6, r24	; 0x06
	orders[j].cell = cT_WEST;
 76c:	23 e0       	ldi	r18, 0x03	; 3
 76e:	27 83       	std	Z+7, r18	; 0x07
	j++;
	// 5th order
	orders[j].direction = (cellType) orders[j-1].cell;
 770:	20 87       	std	Z+8, r18	; 0x08
	orders[j].cell = cT_NORTH;
 772:	11 86       	std	Z+9, r1	; 0x09
	j++;
	// 6th order
	orders[j].direction = (cellType) orders[j-1].cell;
 774:	12 86       	std	Z+10, r1	; 0x0a
	orders[j].cell = cT_EAST;
 776:	93 87       	std	Z+11, r25	; 0x0b
	j++;
	// 7th order
	orders[j].direction = (cellType) orders[j-1].cell;
 778:	94 87       	std	Z+12, r25	; 0x0c
	orders[j].cell = cT_SOUTH;
 77a:	85 87       	std	Z+13, r24	; 0x0d
	j++;
	// 8th order
	orders[j].direction = (cellType) orders[j-1].cell;
 77c:	86 87       	std	Z+14, r24	; 0x0e
	orders[j].cell = cT_WEST;
 77e:	27 87       	std	Z+15, r18	; 0x0f
 780:	08 95       	ret

00000782 <main>:

	return state;
}

int main(void)
{
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	ac 97       	sbiw	r28, 0x2c	; 44
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF; PORTA=0x00;
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	81 b9       	out	0x01, r24	; 1
 79a:	12 b8       	out	0x02, r1	; 2
	DDRB=0x03; PORTB=0x00;
 79c:	93 e0       	ldi	r25, 0x03	; 3
 79e:	94 b9       	out	0x04, r25	; 4
 7a0:	15 b8       	out	0x05, r1	; 5
	DDRC=0xFF; PORTC=0x00;
 7a2:	87 b9       	out	0x07, r24	; 7
 7a4:	18 b8       	out	0x08, r1	; 8
	DDRD=0xAA; PORTD=0x00;
 7a6:	8a ea       	ldi	r24, 0xAA	; 170
 7a8:	8a b9       	out	0x0a, r24	; 10
 7aa:	1b b8       	out	0x0b, r1	; 11
	
	LCD_init();
 7ac:	c1 dd       	rcall	.-1150   	; 0x330 <LCD_init>
	init_orders();
 7ae:	d3 df       	rcall	.-90     	; 0x756 <init_orders>
	instruct_sequence(instructions, 0, 4);
 7b0:	44 e0       	ldi	r20, 0x04	; 4
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	20 df       	rcall	.-448    	; 0x5fa <instruct_sequence>
    
    tasksNum = 4; // declare number of tasks
 7ba:	84 e0       	ldi	r24, 0x04	; 4
 7bc:	80 93 20 01 	sts	0x0120, r24
    task tsks[4]; // initialize the task array
    tasks = tsks; // set the task array
 7c0:	ce 01       	movw	r24, r28
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	90 93 26 01 	sts	0x0126, r25
 7c8:	80 93 25 01 	sts	0x0125, r24
    
    // define tasks
    unsigned char i=0; // task counter
    tasks[i].state = M_Wait;
 7cc:	19 82       	std	Y+1, r1	; 0x01
    tasks[i].period = 20;
 7ce:	84 e1       	ldi	r24, 0x14	; 20
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	a0 e0       	ldi	r26, 0x00	; 0
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	8a 83       	std	Y+2, r24	; 0x02
 7d8:	9b 83       	std	Y+3, r25	; 0x03
 7da:	ac 83       	std	Y+4, r26	; 0x04
 7dc:	bd 83       	std	Y+5, r27	; 0x05
    tasks[i].elapsedTime = tasks[i].period;
 7de:	8e 83       	std	Y+6, r24	; 0x06
 7e0:	9f 83       	std	Y+7, r25	; 0x07
 7e2:	a8 87       	std	Y+8, r26	; 0x08
 7e4:	b9 87       	std	Y+9, r27	; 0x09
    tasks[i].TickFct = &Movement;
 7e6:	2b ed       	ldi	r18, 0xDB	; 219
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	3b 87       	std	Y+11, r19	; 0x0b
 7ec:	2a 87       	std	Y+10, r18	; 0x0a
    i++;
    
    tasks[i].state = MT_Wait;
 7ee:	1c 86       	std	Y+12, r1	; 0x0c
    tasks[i].period = 20;
 7f0:	8d 87       	std	Y+13, r24	; 0x0d
 7f2:	9e 87       	std	Y+14, r25	; 0x0e
 7f4:	af 87       	std	Y+15, r26	; 0x0f
 7f6:	b8 8b       	std	Y+16, r27	; 0x10
    tasks[i].elapsedTime = tasks[i].period;
 7f8:	89 8b       	std	Y+17, r24	; 0x11
 7fa:	9a 8b       	std	Y+18, r25	; 0x12
 7fc:	ab 8b       	std	Y+19, r26	; 0x13
 7fe:	bc 8b       	std	Y+20, r27	; 0x14
    tasks[i].TickFct = &MoveTime;
 800:	24 e6       	ldi	r18, 0x64	; 100
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	3e 8b       	std	Y+22, r19	; 0x16
 806:	2d 8b       	std	Y+21, r18	; 0x15
    i++;
	
	tasks[i].state = ES_Init;
 808:	1f 8a       	std	Y+23, r1	; 0x17
	tasks[i].period = 100;
 80a:	44 e6       	ldi	r20, 0x64	; 100
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	48 8f       	std	Y+24, r20	; 0x18
 814:	59 8f       	std	Y+25, r21	; 0x19
 816:	6a 8f       	std	Y+26, r22	; 0x1a
 818:	7b 8f       	std	Y+27, r23	; 0x1b
	tasks[i].elapsedTime = tasks[i].period;
 81a:	4c 8f       	std	Y+28, r20	; 0x1c
 81c:	5d 8f       	std	Y+29, r21	; 0x1d
 81e:	6e 8f       	std	Y+30, r22	; 0x1e
 820:	7f 8f       	std	Y+31, r23	; 0x1f
	tasks[i].TickFct = &Exec_Sequence;
 822:	22 e3       	ldi	r18, 0x32	; 50
 824:	33 e0       	ldi	r19, 0x03	; 3
 826:	39 a3       	std	Y+33, r19	; 0x21
 828:	28 a3       	std	Y+32, r18	; 0x20
	i++;
    
	tasks[i].state = RF_Read;
 82a:	1a a2       	std	Y+34, r1	; 0x22
	tasks[i].period = 200;
 82c:	48 ec       	ldi	r20, 0xC8	; 200
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	4b a3       	std	Y+35, r20	; 0x23
 836:	5c a3       	std	Y+36, r21	; 0x24
 838:	6d a3       	std	Y+37, r22	; 0x25
 83a:	7e a3       	std	Y+38, r23	; 0x26
	tasks[i].elapsedTime = tasks[0].period;
 83c:	8f a3       	std	Y+39, r24	; 0x27
 83e:	98 a7       	std	Y+40, r25	; 0x28
 840:	a9 a7       	std	Y+41, r26	; 0x29
 842:	ba a7       	std	Y+42, r27	; 0x2a
	tasks[i].TickFct = &Range_Finder;
 844:	21 ed       	ldi	r18, 0xD1	; 209
 846:	31 e0       	ldi	r19, 0x01	; 1
 848:	3c a7       	std	Y+44, r19	; 0x2c
 84a:	2b a7       	std	Y+43, r18	; 0x2b
}

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 84c:	80 93 06 01 	sts	0x0106, r24
 850:	90 93 07 01 	sts	0x0107, r25
 854:	a0 93 08 01 	sts	0x0108, r26
 858:	b0 93 09 01 	sts	0x0109, r27
	tasksPeriodCntDown = tasksPeriodGCD;
 85c:	80 93 21 01 	sts	0x0121, r24
 860:	90 93 22 01 	sts	0x0122, r25
 864:	a0 93 23 01 	sts	0x0123, r26
 868:	b0 93 24 01 	sts	0x0124, r27
	
    TimerSet(20);
    TimerOn();
 86c:	a2 de       	rcall	.-700    	; 0x5b2 <TimerOn>
    
    while (1)
    {
    }
 86e:	ff cf       	rjmp	.-2      	; 0x86e <main+0xec>

00000870 <__umulhisi3>:
 870:	a2 9f       	mul	r26, r18
 872:	b0 01       	movw	r22, r0
 874:	b3 9f       	mul	r27, r19
 876:	c0 01       	movw	r24, r0
 878:	a3 9f       	mul	r26, r19
 87a:	70 0d       	add	r23, r0
 87c:	81 1d       	adc	r24, r1
 87e:	11 24       	eor	r1, r1
 880:	91 1d       	adc	r25, r1
 882:	b2 9f       	mul	r27, r18
 884:	70 0d       	add	r23, r0
 886:	81 1d       	adc	r24, r1
 888:	11 24       	eor	r1, r1
 88a:	91 1d       	adc	r25, r1
 88c:	08 95       	ret

0000088e <sprintf>:
 88e:	0f 93       	push	r16
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
 89a:	2e 97       	sbiw	r28, 0x0e	; 14
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	f8 94       	cli
 8a0:	de bf       	out	0x3e, r29	; 62
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	cd bf       	out	0x3d, r28	; 61
 8a6:	0d 89       	ldd	r16, Y+21	; 0x15
 8a8:	1e 89       	ldd	r17, Y+22	; 0x16
 8aa:	86 e0       	ldi	r24, 0x06	; 6
 8ac:	8c 83       	std	Y+4, r24	; 0x04
 8ae:	1a 83       	std	Y+2, r17	; 0x02
 8b0:	09 83       	std	Y+1, r16	; 0x01
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f e7       	ldi	r25, 0x7F	; 127
 8b6:	9e 83       	std	Y+6, r25	; 0x06
 8b8:	8d 83       	std	Y+5, r24	; 0x05
 8ba:	ae 01       	movw	r20, r28
 8bc:	47 5e       	subi	r20, 0xE7	; 231
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	6f 89       	ldd	r22, Y+23	; 0x17
 8c2:	78 8d       	ldd	r23, Y+24	; 0x18
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	11 d0       	rcall	.+34     	; 0x8ec <vfprintf>
 8ca:	2f 81       	ldd	r18, Y+7	; 0x07
 8cc:	38 85       	ldd	r19, Y+8	; 0x08
 8ce:	f8 01       	movw	r30, r16
 8d0:	e2 0f       	add	r30, r18
 8d2:	f3 1f       	adc	r31, r19
 8d4:	10 82       	st	Z, r1
 8d6:	2e 96       	adiw	r28, 0x0e	; 14
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	de bf       	out	0x3e, r29	; 62
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	cd bf       	out	0x3d, r28	; 61
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	08 95       	ret

000008ec <vfprintf>:
 8ec:	2f 92       	push	r2
 8ee:	3f 92       	push	r3
 8f0:	4f 92       	push	r4
 8f2:	5f 92       	push	r5
 8f4:	6f 92       	push	r6
 8f6:	7f 92       	push	r7
 8f8:	8f 92       	push	r8
 8fa:	9f 92       	push	r9
 8fc:	af 92       	push	r10
 8fe:	bf 92       	push	r11
 900:	cf 92       	push	r12
 902:	df 92       	push	r13
 904:	ef 92       	push	r14
 906:	ff 92       	push	r15
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
 914:	2c 97       	sbiw	r28, 0x0c	; 12
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	7c 01       	movw	r14, r24
 922:	6b 01       	movw	r12, r22
 924:	8a 01       	movw	r16, r20
 926:	fc 01       	movw	r30, r24
 928:	17 82       	std	Z+7, r1	; 0x07
 92a:	16 82       	std	Z+6, r1	; 0x06
 92c:	83 81       	ldd	r24, Z+3	; 0x03
 92e:	81 ff       	sbrs	r24, 1
 930:	b0 c1       	rjmp	.+864    	; 0xc92 <vfprintf+0x3a6>
 932:	ce 01       	movw	r24, r28
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	4c 01       	movw	r8, r24
 938:	f7 01       	movw	r30, r14
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	f6 01       	movw	r30, r12
 93e:	93 fd       	sbrc	r25, 3
 940:	85 91       	lpm	r24, Z+
 942:	93 ff       	sbrs	r25, 3
 944:	81 91       	ld	r24, Z+
 946:	6f 01       	movw	r12, r30
 948:	88 23       	and	r24, r24
 94a:	09 f4       	brne	.+2      	; 0x94e <vfprintf+0x62>
 94c:	9e c1       	rjmp	.+828    	; 0xc8a <vfprintf+0x39e>
 94e:	85 32       	cpi	r24, 0x25	; 37
 950:	39 f4       	brne	.+14     	; 0x960 <vfprintf+0x74>
 952:	93 fd       	sbrc	r25, 3
 954:	85 91       	lpm	r24, Z+
 956:	93 ff       	sbrs	r25, 3
 958:	81 91       	ld	r24, Z+
 95a:	6f 01       	movw	r12, r30
 95c:	85 32       	cpi	r24, 0x25	; 37
 95e:	21 f4       	brne	.+8      	; 0x968 <vfprintf+0x7c>
 960:	b7 01       	movw	r22, r14
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	c7 d1       	rcall	.+910    	; 0xcf4 <fputc>
 966:	e8 cf       	rjmp	.-48     	; 0x938 <vfprintf+0x4c>
 968:	51 2c       	mov	r5, r1
 96a:	31 2c       	mov	r3, r1
 96c:	20 e0       	ldi	r18, 0x00	; 0
 96e:	20 32       	cpi	r18, 0x20	; 32
 970:	a0 f4       	brcc	.+40     	; 0x99a <vfprintf+0xae>
 972:	8b 32       	cpi	r24, 0x2B	; 43
 974:	69 f0       	breq	.+26     	; 0x990 <vfprintf+0xa4>
 976:	30 f4       	brcc	.+12     	; 0x984 <vfprintf+0x98>
 978:	80 32       	cpi	r24, 0x20	; 32
 97a:	59 f0       	breq	.+22     	; 0x992 <vfprintf+0xa6>
 97c:	83 32       	cpi	r24, 0x23	; 35
 97e:	69 f4       	brne	.+26     	; 0x99a <vfprintf+0xae>
 980:	20 61       	ori	r18, 0x10	; 16
 982:	2c c0       	rjmp	.+88     	; 0x9dc <vfprintf+0xf0>
 984:	8d 32       	cpi	r24, 0x2D	; 45
 986:	39 f0       	breq	.+14     	; 0x996 <vfprintf+0xaa>
 988:	80 33       	cpi	r24, 0x30	; 48
 98a:	39 f4       	brne	.+14     	; 0x99a <vfprintf+0xae>
 98c:	21 60       	ori	r18, 0x01	; 1
 98e:	26 c0       	rjmp	.+76     	; 0x9dc <vfprintf+0xf0>
 990:	22 60       	ori	r18, 0x02	; 2
 992:	24 60       	ori	r18, 0x04	; 4
 994:	23 c0       	rjmp	.+70     	; 0x9dc <vfprintf+0xf0>
 996:	28 60       	ori	r18, 0x08	; 8
 998:	21 c0       	rjmp	.+66     	; 0x9dc <vfprintf+0xf0>
 99a:	27 fd       	sbrc	r18, 7
 99c:	27 c0       	rjmp	.+78     	; 0x9ec <vfprintf+0x100>
 99e:	30 ed       	ldi	r19, 0xD0	; 208
 9a0:	38 0f       	add	r19, r24
 9a2:	3a 30       	cpi	r19, 0x0A	; 10
 9a4:	78 f4       	brcc	.+30     	; 0x9c4 <vfprintf+0xd8>
 9a6:	26 ff       	sbrs	r18, 6
 9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <vfprintf+0xca>
 9aa:	fa e0       	ldi	r31, 0x0A	; 10
 9ac:	5f 9e       	mul	r5, r31
 9ae:	30 0d       	add	r19, r0
 9b0:	11 24       	eor	r1, r1
 9b2:	53 2e       	mov	r5, r19
 9b4:	13 c0       	rjmp	.+38     	; 0x9dc <vfprintf+0xf0>
 9b6:	8a e0       	ldi	r24, 0x0A	; 10
 9b8:	38 9e       	mul	r3, r24
 9ba:	30 0d       	add	r19, r0
 9bc:	11 24       	eor	r1, r1
 9be:	33 2e       	mov	r3, r19
 9c0:	20 62       	ori	r18, 0x20	; 32
 9c2:	0c c0       	rjmp	.+24     	; 0x9dc <vfprintf+0xf0>
 9c4:	8e 32       	cpi	r24, 0x2E	; 46
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <vfprintf+0xe4>
 9c8:	26 fd       	sbrc	r18, 6
 9ca:	5f c1       	rjmp	.+702    	; 0xc8a <vfprintf+0x39e>
 9cc:	20 64       	ori	r18, 0x40	; 64
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0xf0>
 9d0:	8c 36       	cpi	r24, 0x6C	; 108
 9d2:	11 f4       	brne	.+4      	; 0x9d8 <vfprintf+0xec>
 9d4:	20 68       	ori	r18, 0x80	; 128
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0xf0>
 9d8:	88 36       	cpi	r24, 0x68	; 104
 9da:	41 f4       	brne	.+16     	; 0x9ec <vfprintf+0x100>
 9dc:	f6 01       	movw	r30, r12
 9de:	93 fd       	sbrc	r25, 3
 9e0:	85 91       	lpm	r24, Z+
 9e2:	93 ff       	sbrs	r25, 3
 9e4:	81 91       	ld	r24, Z+
 9e6:	6f 01       	movw	r12, r30
 9e8:	81 11       	cpse	r24, r1
 9ea:	c1 cf       	rjmp	.-126    	; 0x96e <vfprintf+0x82>
 9ec:	98 2f       	mov	r25, r24
 9ee:	9f 7d       	andi	r25, 0xDF	; 223
 9f0:	95 54       	subi	r25, 0x45	; 69
 9f2:	93 30       	cpi	r25, 0x03	; 3
 9f4:	28 f4       	brcc	.+10     	; 0xa00 <vfprintf+0x114>
 9f6:	0c 5f       	subi	r16, 0xFC	; 252
 9f8:	1f 4f       	sbci	r17, 0xFF	; 255
 9fa:	ff e3       	ldi	r31, 0x3F	; 63
 9fc:	f9 83       	std	Y+1, r31	; 0x01
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <vfprintf+0x12e>
 a00:	83 36       	cpi	r24, 0x63	; 99
 a02:	31 f0       	breq	.+12     	; 0xa10 <vfprintf+0x124>
 a04:	83 37       	cpi	r24, 0x73	; 115
 a06:	71 f0       	breq	.+28     	; 0xa24 <vfprintf+0x138>
 a08:	83 35       	cpi	r24, 0x53	; 83
 a0a:	09 f0       	breq	.+2      	; 0xa0e <vfprintf+0x122>
 a0c:	57 c0       	rjmp	.+174    	; 0xabc <vfprintf+0x1d0>
 a0e:	21 c0       	rjmp	.+66     	; 0xa52 <vfprintf+0x166>
 a10:	f8 01       	movw	r30, r16
 a12:	80 81       	ld	r24, Z
 a14:	89 83       	std	Y+1, r24	; 0x01
 a16:	0e 5f       	subi	r16, 0xFE	; 254
 a18:	1f 4f       	sbci	r17, 0xFF	; 255
 a1a:	44 24       	eor	r4, r4
 a1c:	43 94       	inc	r4
 a1e:	51 2c       	mov	r5, r1
 a20:	54 01       	movw	r10, r8
 a22:	14 c0       	rjmp	.+40     	; 0xa4c <vfprintf+0x160>
 a24:	38 01       	movw	r6, r16
 a26:	f2 e0       	ldi	r31, 0x02	; 2
 a28:	6f 0e       	add	r6, r31
 a2a:	71 1c       	adc	r7, r1
 a2c:	f8 01       	movw	r30, r16
 a2e:	a0 80       	ld	r10, Z
 a30:	b1 80       	ldd	r11, Z+1	; 0x01
 a32:	26 ff       	sbrs	r18, 6
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <vfprintf+0x150>
 a36:	65 2d       	mov	r22, r5
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <vfprintf+0x154>
 a3c:	6f ef       	ldi	r22, 0xFF	; 255
 a3e:	7f ef       	ldi	r23, 0xFF	; 255
 a40:	c5 01       	movw	r24, r10
 a42:	2c 87       	std	Y+12, r18	; 0x0c
 a44:	4c d1       	rcall	.+664    	; 0xcde <strnlen>
 a46:	2c 01       	movw	r4, r24
 a48:	83 01       	movw	r16, r6
 a4a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a4c:	2f 77       	andi	r18, 0x7F	; 127
 a4e:	22 2e       	mov	r2, r18
 a50:	16 c0       	rjmp	.+44     	; 0xa7e <vfprintf+0x192>
 a52:	38 01       	movw	r6, r16
 a54:	f2 e0       	ldi	r31, 0x02	; 2
 a56:	6f 0e       	add	r6, r31
 a58:	71 1c       	adc	r7, r1
 a5a:	f8 01       	movw	r30, r16
 a5c:	a0 80       	ld	r10, Z
 a5e:	b1 80       	ldd	r11, Z+1	; 0x01
 a60:	26 ff       	sbrs	r18, 6
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <vfprintf+0x17e>
 a64:	65 2d       	mov	r22, r5
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0x182>
 a6a:	6f ef       	ldi	r22, 0xFF	; 255
 a6c:	7f ef       	ldi	r23, 0xFF	; 255
 a6e:	c5 01       	movw	r24, r10
 a70:	2c 87       	std	Y+12, r18	; 0x0c
 a72:	2a d1       	rcall	.+596    	; 0xcc8 <strnlen_P>
 a74:	2c 01       	movw	r4, r24
 a76:	2c 85       	ldd	r18, Y+12	; 0x0c
 a78:	20 68       	ori	r18, 0x80	; 128
 a7a:	22 2e       	mov	r2, r18
 a7c:	83 01       	movw	r16, r6
 a7e:	23 fc       	sbrc	r2, 3
 a80:	19 c0       	rjmp	.+50     	; 0xab4 <vfprintf+0x1c8>
 a82:	83 2d       	mov	r24, r3
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	48 16       	cp	r4, r24
 a88:	59 06       	cpc	r5, r25
 a8a:	a0 f4       	brcc	.+40     	; 0xab4 <vfprintf+0x1c8>
 a8c:	b7 01       	movw	r22, r14
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	30 d1       	rcall	.+608    	; 0xcf4 <fputc>
 a94:	3a 94       	dec	r3
 a96:	f5 cf       	rjmp	.-22     	; 0xa82 <vfprintf+0x196>
 a98:	f5 01       	movw	r30, r10
 a9a:	27 fc       	sbrc	r2, 7
 a9c:	85 91       	lpm	r24, Z+
 a9e:	27 fe       	sbrs	r2, 7
 aa0:	81 91       	ld	r24, Z+
 aa2:	5f 01       	movw	r10, r30
 aa4:	b7 01       	movw	r22, r14
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	25 d1       	rcall	.+586    	; 0xcf4 <fputc>
 aaa:	31 10       	cpse	r3, r1
 aac:	3a 94       	dec	r3
 aae:	f1 e0       	ldi	r31, 0x01	; 1
 ab0:	4f 1a       	sub	r4, r31
 ab2:	51 08       	sbc	r5, r1
 ab4:	41 14       	cp	r4, r1
 ab6:	51 04       	cpc	r5, r1
 ab8:	79 f7       	brne	.-34     	; 0xa98 <vfprintf+0x1ac>
 aba:	de c0       	rjmp	.+444    	; 0xc78 <vfprintf+0x38c>
 abc:	84 36       	cpi	r24, 0x64	; 100
 abe:	11 f0       	breq	.+4      	; 0xac4 <vfprintf+0x1d8>
 ac0:	89 36       	cpi	r24, 0x69	; 105
 ac2:	31 f5       	brne	.+76     	; 0xb10 <vfprintf+0x224>
 ac4:	f8 01       	movw	r30, r16
 ac6:	27 ff       	sbrs	r18, 7
 ac8:	07 c0       	rjmp	.+14     	; 0xad8 <vfprintf+0x1ec>
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	82 81       	ldd	r24, Z+2	; 0x02
 ad0:	93 81       	ldd	r25, Z+3	; 0x03
 ad2:	0c 5f       	subi	r16, 0xFC	; 252
 ad4:	1f 4f       	sbci	r17, 0xFF	; 255
 ad6:	08 c0       	rjmp	.+16     	; 0xae8 <vfprintf+0x1fc>
 ad8:	60 81       	ld	r22, Z
 ada:	71 81       	ldd	r23, Z+1	; 0x01
 adc:	07 2e       	mov	r0, r23
 ade:	00 0c       	add	r0, r0
 ae0:	88 0b       	sbc	r24, r24
 ae2:	99 0b       	sbc	r25, r25
 ae4:	0e 5f       	subi	r16, 0xFE	; 254
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	2f 76       	andi	r18, 0x6F	; 111
 aea:	72 2e       	mov	r7, r18
 aec:	97 ff       	sbrs	r25, 7
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <vfprintf+0x216>
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	20 68       	ori	r18, 0x80	; 128
 b00:	72 2e       	mov	r7, r18
 b02:	2a e0       	ldi	r18, 0x0A	; 10
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	a4 01       	movw	r20, r8
 b08:	2d d1       	rcall	.+602    	; 0xd64 <__ultoa_invert>
 b0a:	a8 2e       	mov	r10, r24
 b0c:	a8 18       	sub	r10, r8
 b0e:	43 c0       	rjmp	.+134    	; 0xb96 <vfprintf+0x2aa>
 b10:	85 37       	cpi	r24, 0x75	; 117
 b12:	29 f4       	brne	.+10     	; 0xb1e <vfprintf+0x232>
 b14:	2f 7e       	andi	r18, 0xEF	; 239
 b16:	b2 2e       	mov	r11, r18
 b18:	2a e0       	ldi	r18, 0x0A	; 10
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	25 c0       	rjmp	.+74     	; 0xb68 <vfprintf+0x27c>
 b1e:	f2 2f       	mov	r31, r18
 b20:	f9 7f       	andi	r31, 0xF9	; 249
 b22:	bf 2e       	mov	r11, r31
 b24:	8f 36       	cpi	r24, 0x6F	; 111
 b26:	c1 f0       	breq	.+48     	; 0xb58 <vfprintf+0x26c>
 b28:	18 f4       	brcc	.+6      	; 0xb30 <vfprintf+0x244>
 b2a:	88 35       	cpi	r24, 0x58	; 88
 b2c:	79 f0       	breq	.+30     	; 0xb4c <vfprintf+0x260>
 b2e:	ad c0       	rjmp	.+346    	; 0xc8a <vfprintf+0x39e>
 b30:	80 37       	cpi	r24, 0x70	; 112
 b32:	19 f0       	breq	.+6      	; 0xb3a <vfprintf+0x24e>
 b34:	88 37       	cpi	r24, 0x78	; 120
 b36:	21 f0       	breq	.+8      	; 0xb40 <vfprintf+0x254>
 b38:	a8 c0       	rjmp	.+336    	; 0xc8a <vfprintf+0x39e>
 b3a:	2f 2f       	mov	r18, r31
 b3c:	20 61       	ori	r18, 0x10	; 16
 b3e:	b2 2e       	mov	r11, r18
 b40:	b4 fe       	sbrs	r11, 4
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x272>
 b44:	8b 2d       	mov	r24, r11
 b46:	84 60       	ori	r24, 0x04	; 4
 b48:	b8 2e       	mov	r11, r24
 b4a:	09 c0       	rjmp	.+18     	; 0xb5e <vfprintf+0x272>
 b4c:	24 ff       	sbrs	r18, 4
 b4e:	0a c0       	rjmp	.+20     	; 0xb64 <vfprintf+0x278>
 b50:	9f 2f       	mov	r25, r31
 b52:	96 60       	ori	r25, 0x06	; 6
 b54:	b9 2e       	mov	r11, r25
 b56:	06 c0       	rjmp	.+12     	; 0xb64 <vfprintf+0x278>
 b58:	28 e0       	ldi	r18, 0x08	; 8
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	05 c0       	rjmp	.+10     	; 0xb68 <vfprintf+0x27c>
 b5e:	20 e1       	ldi	r18, 0x10	; 16
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <vfprintf+0x27c>
 b64:	20 e1       	ldi	r18, 0x10	; 16
 b66:	32 e0       	ldi	r19, 0x02	; 2
 b68:	f8 01       	movw	r30, r16
 b6a:	b7 fe       	sbrs	r11, 7
 b6c:	07 c0       	rjmp	.+14     	; 0xb7c <vfprintf+0x290>
 b6e:	60 81       	ld	r22, Z
 b70:	71 81       	ldd	r23, Z+1	; 0x01
 b72:	82 81       	ldd	r24, Z+2	; 0x02
 b74:	93 81       	ldd	r25, Z+3	; 0x03
 b76:	0c 5f       	subi	r16, 0xFC	; 252
 b78:	1f 4f       	sbci	r17, 0xFF	; 255
 b7a:	06 c0       	rjmp	.+12     	; 0xb88 <vfprintf+0x29c>
 b7c:	60 81       	ld	r22, Z
 b7e:	71 81       	ldd	r23, Z+1	; 0x01
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 5f       	subi	r16, 0xFE	; 254
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	a4 01       	movw	r20, r8
 b8a:	ec d0       	rcall	.+472    	; 0xd64 <__ultoa_invert>
 b8c:	a8 2e       	mov	r10, r24
 b8e:	a8 18       	sub	r10, r8
 b90:	fb 2d       	mov	r31, r11
 b92:	ff 77       	andi	r31, 0x7F	; 127
 b94:	7f 2e       	mov	r7, r31
 b96:	76 fe       	sbrs	r7, 6
 b98:	0b c0       	rjmp	.+22     	; 0xbb0 <vfprintf+0x2c4>
 b9a:	37 2d       	mov	r19, r7
 b9c:	3e 7f       	andi	r19, 0xFE	; 254
 b9e:	a5 14       	cp	r10, r5
 ba0:	50 f4       	brcc	.+20     	; 0xbb6 <vfprintf+0x2ca>
 ba2:	74 fe       	sbrs	r7, 4
 ba4:	0a c0       	rjmp	.+20     	; 0xbba <vfprintf+0x2ce>
 ba6:	72 fc       	sbrc	r7, 2
 ba8:	08 c0       	rjmp	.+16     	; 0xbba <vfprintf+0x2ce>
 baa:	37 2d       	mov	r19, r7
 bac:	3e 7e       	andi	r19, 0xEE	; 238
 bae:	05 c0       	rjmp	.+10     	; 0xbba <vfprintf+0x2ce>
 bb0:	ba 2c       	mov	r11, r10
 bb2:	37 2d       	mov	r19, r7
 bb4:	03 c0       	rjmp	.+6      	; 0xbbc <vfprintf+0x2d0>
 bb6:	ba 2c       	mov	r11, r10
 bb8:	01 c0       	rjmp	.+2      	; 0xbbc <vfprintf+0x2d0>
 bba:	b5 2c       	mov	r11, r5
 bbc:	34 ff       	sbrs	r19, 4
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x2ee>
 bc0:	fe 01       	movw	r30, r28
 bc2:	ea 0d       	add	r30, r10
 bc4:	f1 1d       	adc	r31, r1
 bc6:	80 81       	ld	r24, Z
 bc8:	80 33       	cpi	r24, 0x30	; 48
 bca:	11 f4       	brne	.+4      	; 0xbd0 <vfprintf+0x2e4>
 bcc:	39 7e       	andi	r19, 0xE9	; 233
 bce:	09 c0       	rjmp	.+18     	; 0xbe2 <vfprintf+0x2f6>
 bd0:	32 ff       	sbrs	r19, 2
 bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <vfprintf+0x2f4>
 bd4:	b3 94       	inc	r11
 bd6:	b3 94       	inc	r11
 bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <vfprintf+0x2f6>
 bda:	83 2f       	mov	r24, r19
 bdc:	86 78       	andi	r24, 0x86	; 134
 bde:	09 f0       	breq	.+2      	; 0xbe2 <vfprintf+0x2f6>
 be0:	b3 94       	inc	r11
 be2:	33 fd       	sbrc	r19, 3
 be4:	12 c0       	rjmp	.+36     	; 0xc0a <vfprintf+0x31e>
 be6:	30 ff       	sbrs	r19, 0
 be8:	06 c0       	rjmp	.+12     	; 0xbf6 <vfprintf+0x30a>
 bea:	5a 2c       	mov	r5, r10
 bec:	b3 14       	cp	r11, r3
 bee:	18 f4       	brcc	.+6      	; 0xbf6 <vfprintf+0x30a>
 bf0:	53 0c       	add	r5, r3
 bf2:	5b 18       	sub	r5, r11
 bf4:	b3 2c       	mov	r11, r3
 bf6:	b3 14       	cp	r11, r3
 bf8:	60 f4       	brcc	.+24     	; 0xc12 <vfprintf+0x326>
 bfa:	b7 01       	movw	r22, r14
 bfc:	80 e2       	ldi	r24, 0x20	; 32
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	3c 87       	std	Y+12, r19	; 0x0c
 c02:	78 d0       	rcall	.+240    	; 0xcf4 <fputc>
 c04:	b3 94       	inc	r11
 c06:	3c 85       	ldd	r19, Y+12	; 0x0c
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <vfprintf+0x30a>
 c0a:	b3 14       	cp	r11, r3
 c0c:	10 f4       	brcc	.+4      	; 0xc12 <vfprintf+0x326>
 c0e:	3b 18       	sub	r3, r11
 c10:	01 c0       	rjmp	.+2      	; 0xc14 <vfprintf+0x328>
 c12:	31 2c       	mov	r3, r1
 c14:	34 ff       	sbrs	r19, 4
 c16:	11 c0       	rjmp	.+34     	; 0xc3a <vfprintf+0x34e>
 c18:	b7 01       	movw	r22, r14
 c1a:	80 e3       	ldi	r24, 0x30	; 48
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	3c 87       	std	Y+12, r19	; 0x0c
 c20:	69 d0       	rcall	.+210    	; 0xcf4 <fputc>
 c22:	3c 85       	ldd	r19, Y+12	; 0x0c
 c24:	32 ff       	sbrs	r19, 2
 c26:	16 c0       	rjmp	.+44     	; 0xc54 <vfprintf+0x368>
 c28:	31 fd       	sbrc	r19, 1
 c2a:	03 c0       	rjmp	.+6      	; 0xc32 <vfprintf+0x346>
 c2c:	88 e7       	ldi	r24, 0x78	; 120
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0x34a>
 c32:	88 e5       	ldi	r24, 0x58	; 88
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	b7 01       	movw	r22, r14
 c38:	0c c0       	rjmp	.+24     	; 0xc52 <vfprintf+0x366>
 c3a:	83 2f       	mov	r24, r19
 c3c:	86 78       	andi	r24, 0x86	; 134
 c3e:	51 f0       	breq	.+20     	; 0xc54 <vfprintf+0x368>
 c40:	31 ff       	sbrs	r19, 1
 c42:	02 c0       	rjmp	.+4      	; 0xc48 <vfprintf+0x35c>
 c44:	8b e2       	ldi	r24, 0x2B	; 43
 c46:	01 c0       	rjmp	.+2      	; 0xc4a <vfprintf+0x35e>
 c48:	80 e2       	ldi	r24, 0x20	; 32
 c4a:	37 fd       	sbrc	r19, 7
 c4c:	8d e2       	ldi	r24, 0x2D	; 45
 c4e:	b7 01       	movw	r22, r14
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	50 d0       	rcall	.+160    	; 0xcf4 <fputc>
 c54:	a5 14       	cp	r10, r5
 c56:	30 f4       	brcc	.+12     	; 0xc64 <vfprintf+0x378>
 c58:	b7 01       	movw	r22, r14
 c5a:	80 e3       	ldi	r24, 0x30	; 48
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	4a d0       	rcall	.+148    	; 0xcf4 <fputc>
 c60:	5a 94       	dec	r5
 c62:	f8 cf       	rjmp	.-16     	; 0xc54 <vfprintf+0x368>
 c64:	aa 94       	dec	r10
 c66:	f4 01       	movw	r30, r8
 c68:	ea 0d       	add	r30, r10
 c6a:	f1 1d       	adc	r31, r1
 c6c:	80 81       	ld	r24, Z
 c6e:	b7 01       	movw	r22, r14
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	40 d0       	rcall	.+128    	; 0xcf4 <fputc>
 c74:	a1 10       	cpse	r10, r1
 c76:	f6 cf       	rjmp	.-20     	; 0xc64 <vfprintf+0x378>
 c78:	33 20       	and	r3, r3
 c7a:	09 f4       	brne	.+2      	; 0xc7e <vfprintf+0x392>
 c7c:	5d ce       	rjmp	.-838    	; 0x938 <vfprintf+0x4c>
 c7e:	b7 01       	movw	r22, r14
 c80:	80 e2       	ldi	r24, 0x20	; 32
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	37 d0       	rcall	.+110    	; 0xcf4 <fputc>
 c86:	3a 94       	dec	r3
 c88:	f7 cf       	rjmp	.-18     	; 0xc78 <vfprintf+0x38c>
 c8a:	f7 01       	movw	r30, r14
 c8c:	86 81       	ldd	r24, Z+6	; 0x06
 c8e:	97 81       	ldd	r25, Z+7	; 0x07
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <vfprintf+0x3aa>
 c92:	8f ef       	ldi	r24, 0xFF	; 255
 c94:	9f ef       	ldi	r25, 0xFF	; 255
 c96:	2c 96       	adiw	r28, 0x0c	; 12
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	f8 94       	cli
 c9c:	de bf       	out	0x3e, r29	; 62
 c9e:	0f be       	out	0x3f, r0	; 63
 ca0:	cd bf       	out	0x3d, r28	; 61
 ca2:	df 91       	pop	r29
 ca4:	cf 91       	pop	r28
 ca6:	1f 91       	pop	r17
 ca8:	0f 91       	pop	r16
 caa:	ff 90       	pop	r15
 cac:	ef 90       	pop	r14
 cae:	df 90       	pop	r13
 cb0:	cf 90       	pop	r12
 cb2:	bf 90       	pop	r11
 cb4:	af 90       	pop	r10
 cb6:	9f 90       	pop	r9
 cb8:	8f 90       	pop	r8
 cba:	7f 90       	pop	r7
 cbc:	6f 90       	pop	r6
 cbe:	5f 90       	pop	r5
 cc0:	4f 90       	pop	r4
 cc2:	3f 90       	pop	r3
 cc4:	2f 90       	pop	r2
 cc6:	08 95       	ret

00000cc8 <strnlen_P>:
 cc8:	fc 01       	movw	r30, r24
 cca:	05 90       	lpm	r0, Z+
 ccc:	61 50       	subi	r22, 0x01	; 1
 cce:	70 40       	sbci	r23, 0x00	; 0
 cd0:	01 10       	cpse	r0, r1
 cd2:	d8 f7       	brcc	.-10     	; 0xcca <strnlen_P+0x2>
 cd4:	80 95       	com	r24
 cd6:	90 95       	com	r25
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	08 95       	ret

00000cde <strnlen>:
 cde:	fc 01       	movw	r30, r24
 ce0:	61 50       	subi	r22, 0x01	; 1
 ce2:	70 40       	sbci	r23, 0x00	; 0
 ce4:	01 90       	ld	r0, Z+
 ce6:	01 10       	cpse	r0, r1
 ce8:	d8 f7       	brcc	.-10     	; 0xce0 <strnlen+0x2>
 cea:	80 95       	com	r24
 cec:	90 95       	com	r25
 cee:	8e 0f       	add	r24, r30
 cf0:	9f 1f       	adc	r25, r31
 cf2:	08 95       	ret

00000cf4 <fputc>:
 cf4:	0f 93       	push	r16
 cf6:	1f 93       	push	r17
 cf8:	cf 93       	push	r28
 cfa:	df 93       	push	r29
 cfc:	fb 01       	movw	r30, r22
 cfe:	23 81       	ldd	r18, Z+3	; 0x03
 d00:	21 fd       	sbrc	r18, 1
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <fputc+0x16>
 d04:	8f ef       	ldi	r24, 0xFF	; 255
 d06:	9f ef       	ldi	r25, 0xFF	; 255
 d08:	28 c0       	rjmp	.+80     	; 0xd5a <fputc+0x66>
 d0a:	22 ff       	sbrs	r18, 2
 d0c:	16 c0       	rjmp	.+44     	; 0xd3a <fputc+0x46>
 d0e:	46 81       	ldd	r20, Z+6	; 0x06
 d10:	57 81       	ldd	r21, Z+7	; 0x07
 d12:	24 81       	ldd	r18, Z+4	; 0x04
 d14:	35 81       	ldd	r19, Z+5	; 0x05
 d16:	42 17       	cp	r20, r18
 d18:	53 07       	cpc	r21, r19
 d1a:	44 f4       	brge	.+16     	; 0xd2c <fputc+0x38>
 d1c:	a0 81       	ld	r26, Z
 d1e:	b1 81       	ldd	r27, Z+1	; 0x01
 d20:	9d 01       	movw	r18, r26
 d22:	2f 5f       	subi	r18, 0xFF	; 255
 d24:	3f 4f       	sbci	r19, 0xFF	; 255
 d26:	31 83       	std	Z+1, r19	; 0x01
 d28:	20 83       	st	Z, r18
 d2a:	8c 93       	st	X, r24
 d2c:	26 81       	ldd	r18, Z+6	; 0x06
 d2e:	37 81       	ldd	r19, Z+7	; 0x07
 d30:	2f 5f       	subi	r18, 0xFF	; 255
 d32:	3f 4f       	sbci	r19, 0xFF	; 255
 d34:	37 83       	std	Z+7, r19	; 0x07
 d36:	26 83       	std	Z+6, r18	; 0x06
 d38:	10 c0       	rjmp	.+32     	; 0xd5a <fputc+0x66>
 d3a:	eb 01       	movw	r28, r22
 d3c:	09 2f       	mov	r16, r25
 d3e:	18 2f       	mov	r17, r24
 d40:	00 84       	ldd	r0, Z+8	; 0x08
 d42:	f1 85       	ldd	r31, Z+9	; 0x09
 d44:	e0 2d       	mov	r30, r0
 d46:	09 95       	icall
 d48:	89 2b       	or	r24, r25
 d4a:	e1 f6       	brne	.-72     	; 0xd04 <fputc+0x10>
 d4c:	8e 81       	ldd	r24, Y+6	; 0x06
 d4e:	9f 81       	ldd	r25, Y+7	; 0x07
 d50:	01 96       	adiw	r24, 0x01	; 1
 d52:	9f 83       	std	Y+7, r25	; 0x07
 d54:	8e 83       	std	Y+6, r24	; 0x06
 d56:	81 2f       	mov	r24, r17
 d58:	90 2f       	mov	r25, r16
 d5a:	df 91       	pop	r29
 d5c:	cf 91       	pop	r28
 d5e:	1f 91       	pop	r17
 d60:	0f 91       	pop	r16
 d62:	08 95       	ret

00000d64 <__ultoa_invert>:
 d64:	fa 01       	movw	r30, r20
 d66:	aa 27       	eor	r26, r26
 d68:	28 30       	cpi	r18, 0x08	; 8
 d6a:	51 f1       	breq	.+84     	; 0xdc0 <__ultoa_invert+0x5c>
 d6c:	20 31       	cpi	r18, 0x10	; 16
 d6e:	81 f1       	breq	.+96     	; 0xdd0 <__ultoa_invert+0x6c>
 d70:	e8 94       	clt
 d72:	6f 93       	push	r22
 d74:	6e 7f       	andi	r22, 0xFE	; 254
 d76:	6e 5f       	subi	r22, 0xFE	; 254
 d78:	7f 4f       	sbci	r23, 0xFF	; 255
 d7a:	8f 4f       	sbci	r24, 0xFF	; 255
 d7c:	9f 4f       	sbci	r25, 0xFF	; 255
 d7e:	af 4f       	sbci	r26, 0xFF	; 255
 d80:	b1 e0       	ldi	r27, 0x01	; 1
 d82:	3e d0       	rcall	.+124    	; 0xe00 <__ultoa_invert+0x9c>
 d84:	b4 e0       	ldi	r27, 0x04	; 4
 d86:	3c d0       	rcall	.+120    	; 0xe00 <__ultoa_invert+0x9c>
 d88:	67 0f       	add	r22, r23
 d8a:	78 1f       	adc	r23, r24
 d8c:	89 1f       	adc	r24, r25
 d8e:	9a 1f       	adc	r25, r26
 d90:	a1 1d       	adc	r26, r1
 d92:	68 0f       	add	r22, r24
 d94:	79 1f       	adc	r23, r25
 d96:	8a 1f       	adc	r24, r26
 d98:	91 1d       	adc	r25, r1
 d9a:	a1 1d       	adc	r26, r1
 d9c:	6a 0f       	add	r22, r26
 d9e:	71 1d       	adc	r23, r1
 da0:	81 1d       	adc	r24, r1
 da2:	91 1d       	adc	r25, r1
 da4:	a1 1d       	adc	r26, r1
 da6:	20 d0       	rcall	.+64     	; 0xde8 <__ultoa_invert+0x84>
 da8:	09 f4       	brne	.+2      	; 0xdac <__ultoa_invert+0x48>
 daa:	68 94       	set
 dac:	3f 91       	pop	r19
 dae:	2a e0       	ldi	r18, 0x0A	; 10
 db0:	26 9f       	mul	r18, r22
 db2:	11 24       	eor	r1, r1
 db4:	30 19       	sub	r19, r0
 db6:	30 5d       	subi	r19, 0xD0	; 208
 db8:	31 93       	st	Z+, r19
 dba:	de f6       	brtc	.-74     	; 0xd72 <__ultoa_invert+0xe>
 dbc:	cf 01       	movw	r24, r30
 dbe:	08 95       	ret
 dc0:	46 2f       	mov	r20, r22
 dc2:	47 70       	andi	r20, 0x07	; 7
 dc4:	40 5d       	subi	r20, 0xD0	; 208
 dc6:	41 93       	st	Z+, r20
 dc8:	b3 e0       	ldi	r27, 0x03	; 3
 dca:	0f d0       	rcall	.+30     	; 0xdea <__ultoa_invert+0x86>
 dcc:	c9 f7       	brne	.-14     	; 0xdc0 <__ultoa_invert+0x5c>
 dce:	f6 cf       	rjmp	.-20     	; 0xdbc <__ultoa_invert+0x58>
 dd0:	46 2f       	mov	r20, r22
 dd2:	4f 70       	andi	r20, 0x0F	; 15
 dd4:	40 5d       	subi	r20, 0xD0	; 208
 dd6:	4a 33       	cpi	r20, 0x3A	; 58
 dd8:	18 f0       	brcs	.+6      	; 0xde0 <__ultoa_invert+0x7c>
 dda:	49 5d       	subi	r20, 0xD9	; 217
 ddc:	31 fd       	sbrc	r19, 1
 dde:	40 52       	subi	r20, 0x20	; 32
 de0:	41 93       	st	Z+, r20
 de2:	02 d0       	rcall	.+4      	; 0xde8 <__ultoa_invert+0x84>
 de4:	a9 f7       	brne	.-22     	; 0xdd0 <__ultoa_invert+0x6c>
 de6:	ea cf       	rjmp	.-44     	; 0xdbc <__ultoa_invert+0x58>
 de8:	b4 e0       	ldi	r27, 0x04	; 4
 dea:	a6 95       	lsr	r26
 dec:	97 95       	ror	r25
 dee:	87 95       	ror	r24
 df0:	77 95       	ror	r23
 df2:	67 95       	ror	r22
 df4:	ba 95       	dec	r27
 df6:	c9 f7       	brne	.-14     	; 0xdea <__ultoa_invert+0x86>
 df8:	00 97       	sbiw	r24, 0x00	; 0
 dfa:	61 05       	cpc	r22, r1
 dfc:	71 05       	cpc	r23, r1
 dfe:	08 95       	ret
 e00:	9b 01       	movw	r18, r22
 e02:	ac 01       	movw	r20, r24
 e04:	0a 2e       	mov	r0, r26
 e06:	06 94       	lsr	r0
 e08:	57 95       	ror	r21
 e0a:	47 95       	ror	r20
 e0c:	37 95       	ror	r19
 e0e:	27 95       	ror	r18
 e10:	ba 95       	dec	r27
 e12:	c9 f7       	brne	.-14     	; 0xe06 <__ultoa_invert+0xa2>
 e14:	62 0f       	add	r22, r18
 e16:	73 1f       	adc	r23, r19
 e18:	84 1f       	adc	r24, r20
 e1a:	95 1f       	adc	r25, r21
 e1c:	a0 1d       	adc	r26, r0
 e1e:	08 95       	ret

00000e20 <_exit>:
 e20:	f8 94       	cli

00000e22 <__stop_program>:
 e22:	ff cf       	rjmp	.-2      	; 0xe22 <__stop_program>
